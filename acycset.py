### approved for acyclic atoms
from os import walk ,getcwd , system , remove
from random import uniform 


d = {1 : {'a': {1: 'C', 2: 'C', 3: 'C', 4: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     2 : {'a': {1: 'C', 2: 'F', 3: 'F', 4: 'F'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     3 : {'a': {1: 'C', 2: 'H', 3: 'C', 4: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     4 : {'a': {1: 'C', 2: 'H', 3: 'F', 4: 'F'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     5 : {'a': {1: 'C', 2: 'H', 3: 'N+',4: 'C'},'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     6 : {'a': {1: 'C', 2: 'H', 3: 'H', 4: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     7 : {'a': {1: 'C', 2: 'H', 3: 'H', 4: 'F'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     8 : {'a': {1: 'C', 2: 'H', 3: 'H', 4: 'S-'},'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     9 : {'a': {1: 'C', 2: 'H', 3: 'H', 4: 'N+'},'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     10: {'a': {1: 'C', 2: 'H', 3: 'H', 4: 'H'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
 
     11: {'a': {1: 'N+', 2: 'C', 3: 'C', 4: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     12: {'a': {1: 'N+', 2: 'H', 3: 'H', 4: 'H'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     13: {'a': {1: 'N+', 2: 'H', 3: 'C', 4: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
     14: {'a': {1: 'N+', 2: 'H', 3: 'H', 4: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1], 3: [1, 4, 1]} , 'c':[1]} ,
             
     15: {'a': {1: 'N', 2: 'C', 3: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1]} ,
     16: {'a': {1: 'N', 2: 'H', 3: 'H'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1]} ,
     17: {'a': {1: 'N', 2: 'H', 3: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1]} ,

     18: {'a': {1: 'O', 2: 'C'}, 'b': {1: [1, 2, 1]} , 'c':[1]},
     19: {'a': {1: 'O', 2: 'H'}, 'b': {1: [1, 2, 1]} , 'c':[1]},

     20: {'a': {1: 'S', 2: 'S'}, 'b': {1: [1, 2, 1]} , 'c':[1]},
     21: {'a': {1: 'S', 2: 'C'}, 'b': {1: [1, 2, 1]} , 'c':[1]},
     22: {'a': {1: 'S', 2: 'H'}, 'b': {1: [1, 2, 1]} , 'c':[1]},

     23: {'a': {1: 'H'}, 'b': {} , 'c':[1]}, 
     24: {'a': {1: 'F'}, 'b': {} , 'c':[1]}, 
     25: {'a': {1: 'BR'},'b': {} , 'c':[1]}, 
     26: {'a': {1: 'CL'},'b': {} , 'c':[1]}, 
     27: {'a': {1: 'I'} ,'b': {} , 'c':[1]}, 
     28: {'a': {1: 'O-'},'b': {} , 'c':[1]}, 
     29: {'a': {1: 'S-'},'b': {} , 'c':[1]}, 

     30: {'a':{1:'C' , 2: 'C' , 3:'C'}  , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]} ,
     31: {'a':{1:'C' , 2: 'C' , 3:'H'}  , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]} ,
     32: {'a':{1:'C' , 2: 'N+', 3:'N'}  , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]} ,
     33: {'a':{1:'C' , 2: 'N' , 3:'N'}  , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]} ,
     34: {'a':{1:'C' , 2: 'O' , 3:'C'}  , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]} ,
     35: {'a':{1:'C' , 2: 'O' , 3:'O'}  , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]} ,
     36: {'a':{1:'C' , 2: 'O' , 3:'N'}  , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]} ,
     37: {'a':{1:'C' , 2: 'O' , 3:'O-'} , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]} ,
     38: {'a':{1:'C' , 2: 'O' , 3:'H'}  , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]} , 

     39: {'a':{1:'N+', 2: 'C' , 3:'H'} , 'b':{1:[1,2,2] , 2:[1,3,1]} , 'c':[1]},
     40: {'a':{1:'N' , 2:'C'} , 'b':{1:[1,2,2]} , 'c':[1]},          
 
     41: {'a':{1:'C' , 2:'C'} , 'b':{1:[1,2,3]} , 'c':[1]} , 
     42: {'a':{1:'C' , 2:'N'} , 'b':{1:[1,2,3]} , 'c':[1]} ,
     43: {'a':{1:'N+', 2:'C' , 3:'O' , 4:'H'} , 'b':{1:[1,2,2] , 2:[2,3,2] , 3:[1,4,1]} , 'c':[1]} , 
     44: {'a':{1:'N+', 2:'C' , 3:'S' , 4:'H'} , 'b':{1:[1,2,2] , 2:[2,3,2] , 3:[1,4,1]} , 'c':[1]} , 
     45: {'a':{1:'N' , 2:'C' , 3:'O'} , 'b':{1:[1,2,2] , 2:[2,3,2]} , 'c':[1]} , 
     46: {'a':{1:'N' , 2:'C' , 3:'S'} , 'b':{1:[1,2,2] , 2:[2,3,2]} , 'c':[1]} ,

     47: {'a': {1: 'S', 2: 'O', 3: 'O', 4:'O-'} , 'b':{1: [1, 2, 2], 2: [1, 3, 2], 3: [1, 4, 1]} , 'c':[1]} , 
     48: {'a': {1: 'S', 2: 'O', 3: 'O', 4:'C'} , 'b':{1: [1, 2, 2], 2: [1, 3, 2], 3: [1, 4, 1]} , 'c':[1]},
     49: {'a': {1: 'S', 2: 'O', 3: 'C'} , 'b':{1: [1, 2, 2], 2: [1, 3, 1]} , 'c':[1]},   

     50:{'a': {1: 'O'}, 'b': {} , 'c':[2]},  
     51:{'a': {1: 'S'}, 'b': {} , 'c':[2]}, 

     52:{'a':{1:'C' , 2: 'C' , 3:'C'}  , 'b':{1:[1,2,1] , 2:[1,3,1]} , 'c':[2]} ,
     53:{'a':{1:'C' , 2: 'C' , 3:'H'}  , 'b':{1:[1,2,1] , 2:[1,3,1]} , 'c':[2]} ,
     54:{'a':{1:'C' , 2: 'C' , 3:'O'}  , 'b':{1:[1,2,1] , 2:[1,3,1]} , 'c':[2]} ,
     55:{'a':{1:'C' , 2: 'C' , 3:'N'}  , 'b':{1:[1,2,1] , 2:[1,3,1]} , 'c':[2]} ,
     56:{'a':{1:'C' , 2: 'C' , 3:'O-'} , 'b':{1:[1,2,1] , 2:[1,3,1]} , 'c':[2]} ,
     57:{'a':{1:'C' , 2: 'H' , 3:'H'}  , 'b':{1:[1,2,1] , 2:[1,3,1]} , 'c':[2]} ,
     58:{'a':{1:'C' , 2: 'H' , 3:'N'}  , 'b':{1:[1,2,1] , 2:[1,3,1]} , 'c':[2]} ,
     59:{'a':{1:'C' , 2: 'N' , 3:'N'}  , 'b':{1:[1,2,1] , 2:[1,3,1]} , 'c':[2]}  ,

     60:{'a':{1:'N+', 2: 'H' , 3:'H'} , 'b':{1:[1,2,1] , 2:[1,3,1]} , 'c':[2]},
     61:{'a':{1:'N' , 2: 'H' } , 'b':{1:[1,2,1]} , 'c':[2]} ,

     62:{'a':{1:'C' , 2:'C'} , 'b':{1:[1,2,1]} , 'c':[3]} , 
     63:{'a':{1:'C' , 2:'H'} , 'b':{1:[1,2,1]} , 'c':[3]} , 

     64:{'a': {1: 'N'}, 'b': {} , 'c':[3]} }                


#================

dl = {101: {'a': {1: 'C', 2: 'C', 3: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      102: {'a': {1: 'C', 2: 'F', 3: 'F'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      103: {'a': {1: 'C', 2: 'H', 3: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      104: {'a': {1: 'C', 2: 'H', 3: 'F'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      105: {'a': {1: 'C', 2: 'H', 3: 'N+'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      106: {'a': {1: 'C', 2: 'H', 3: 'H'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      107: {'a': {1: 'C', 2: 'C', 3: 'F'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      108: {'a': {1: 'C', 2: 'H', 3: 'S-'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      109: {'a': {1: 'C', 2: 'C', 3: 'N+'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      110: {'a': {1: 'C', 2: 'C', 3: 'S-'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,

      111: {'a': {1: 'N+', 2: 'C', 3: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      112: {'a': {1: 'N+', 2: 'H', 3: 'H'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]} ,
      113: {'a': {1: 'N+', 2: 'H', 3: 'C'}, 'b': {1: [1, 2, 1], 2: [1, 3, 1]} , 'c':[1,1]},
 
      114: {'a': {1: 'N', 2: 'C'}, 'b': {1: [1, 2, 1]} , 'c':[1,1]} ,
      115: {'a': {1: 'N', 2: 'H'}, 'b': {1: [1, 2, 1]} , 'c':[1,1]} ,

      116: {'a': {1: 'O'}, 'b': {} , 'c':[1,1]} , 
      117: {'a': {1: 'S'}, 'b': {} , 'c':[1,1]} ,  

      118: {'a':{1: 'C' , 2: 'C'}  , 'b':{1:[1,2,2]} , 'c':[1,1]} ,
      119: {'a':{1: 'C' , 2: 'N+'} , 'b':{1:[1,2,2]} , 'c':[1,1]} ,
      120: {'a':{1: 'C' , 2: 'N'}  , 'b':{1:[1,2,2]} , 'c':[1,1]} ,
      121: {'a':{1: 'C' , 2: 'O'}  , 'b':{1:[1,2,2]} , 'c':[1,1]} ,
 
      122: {'a':{1: 'N+' , 2:'C'} , 'b':{1:[1,2,2]} , 'c':[1,1]} ,

      123: {'a':{1: 'S', 2: 'O', 3: 'O'} , 'b':{1: [1, 2, 2], 2: [1, 3, 2]} , 'c':[1,1]},
      124: {'a':{1: 'S', 2: 'O'} , 'b':{1: [1, 2, 2]} , 'c':[1,1]} ,   

      125:{'a':{1:'C' , 2:'C'}  , 'b':{1:[1,2,1]} , 'c':[1,2]} ,
      126:{'a':{1:'C' , 2:'H'}  , 'b':{1:[1,2,1]} , 'c':[1,2]} ,
      127:{'a':{1:'C' , 2:'O'}  , 'b':{1:[1,2,1]} , 'c':[1,2]} ,
      128:{'a':{1:'C' , 2:'N'}  , 'b':{1:[1,2,1]} , 'c':[1,2]} ,
      129:{'a':{1:'C' , 2:'O-'} , 'b':{1:[1,2,1]} , 'c':[1,2]} ,

      130: {'a': {1: 'N+', 2: 'H'}, 'b': {1: [1, 2, 1]} , 'c':[1,2]},
      131: {'a': {1: 'N'}, 'b': {} , 'c':[1,2]} ,                                                              

      132:{'a':{1:'C' , 2:'C'}  , 'b':{1:[1,2,1]} , 'c':[2,1]} ,
      133:{'a':{1:'C' , 2:'H'}  , 'b':{1:[1,2,1]} , 'c':[2,1]} ,
      134:{'a':{1:'C' , 2:'O'}  , 'b':{1:[1,2,1]} , 'c':[2,1]} ,
      135:{'a':{1:'C' , 2:'N'}  , 'b':{1:[1,2,1]} , 'c':[2,1]} ,
      136:{'a':{1:'C' , 2:'O-'} , 'b':{1:[1,2,1]} , 'c':[2,1]} ,

      137: {'a': {1: 'N+', 2: 'H'}, 'b': {1: [1, 2, 1]} , 'c':[2,1]},
      138: {'a': {1: 'N'}, 'b': {} , 'c':[2,1]},  

      139: {'a': {1: 'C'}, 'b': {} , 'c':[1,3]} ,                                                                 
      140: {'a': {1: 'C'}, 'b': {} , 'c':[3,1]} }
      
dp = {141: {'a': {1: 'P', 2: 'O', 3:'O' , 4:'H'} , 'b':{1: [1, 2, 2], 2: [1, 3, 1] , 3: [3, 4, 1]} , 'c':[1,1]} ,
      142: {'a': {1: 'P', 2: 'O', 3:'O-'} , 'b':{1: [1, 2, 2], 2: [1, 3, 1]} , 'c':[1,1]} }




#===================================================================================================


H = {'C':4 , 'N+':4 , 'N':3 , 'O': 2 , 'S': 2}
def addH(f): 
    # this function completes the connectivities, if deficient, for each atom in the fragment
    # input : a molecular fragment with connectivity-deficient atoms
    # output: a molecular fragment without connectivity-deficient atoms  
    fa = [i for i in f['a']]
    for a in fa : 
        if a > 1 : 
            s = f['a'][a]
            if s in H : 
                nbs = 0
                for b in f['b']: 
                    if a in f['b'][b][0:2] : 
                        nbs += f['b'][b][2] 
                n = max(f['a'])
                for i in range(n+1 , n+1+H[s]-nbs): 
                    f['a'][i] = 'H'
                    f['b'][i-1] = [a,i,1]
    return f

for i in d : 
    d[i] = addH(d[i])
for i in dl : 
    dl[i] = addH(dl[i])

def valid(g) : 
    cord = {'C':4 , 'N+':4 , 'N':3 , 'O':2 , 'O-':1 , 'S-':1 , 'H':1 , 'F':1 , 'BR':1 ,'CL':1 , 'I':1}
    for i in g['a'] : 
        nbs = 0
        for j in g['b'] : 
            if i in g['b'][j][0:2] : 
                nbs += g['b'][j][2]        
        if g['a'][i] in cord and nbs != cord[g['a'][i]]:
            return 0
    return 1
          


def new(L2,pool) :
    # designed for dihedral angles only
    s = {32:25, 33:26, 34:27, 35:28, 36:29, 37:30, 38:31}
    L = []
    for i in L2 : 
        if i in s : 
            L += [s[i]]
        else : 
            L += [i]  
    if [L[3] , L[2] , L[1] , L[0]] in pool: 
        return 0       
    pool += [L2]
    return pool

    
def link(f,g):
    return f['c'][-1] == g['c'][0]


def export(L,c): 
    print
    print c , '  _______________________________________________________________' 
    g = {'a':{} , 'b':{}}
    n = len(L)
    a = 1
    b = 1
    for h in range(n) :  
        f = L[h]       
        ai = a
        for i in f['a'] :             
            g['a'][a] = f['a'][i]
            a += 1
        for i in f['b'] :
            g['b'][b] = []
            for j in f['b'][i][0:2] :
                g['b'][b] += [j+ai-1]            
            g['b'][b] += [f['b'][i][2]]             
            b += 1
        if h < n-1 : 
            g['b'][b] = [ai,a,f['c'][-1]]
            b += 1
        
    mol2 = 'acyc_'+str(c)+'.mol2'
    tf = open(mol2,'w')
    tf.write('@<TRIPOS>MOLECULE\n*****\n')
    tf.write(str(a-1) + '\t' + str(b-1) + '  0  0  0\n')
    tf.write('SMALL\n')
    tf.write('molecule\n\n')
    tf.write('@<TRIPOS>ATOM\n')
    x = [0,0,0]
    for i in g['a'] : 
        j = str(i)
        x = [x[0]+uniform(-2,2),x[1]+uniform(-2,2),x[2]+uniform(-2,2)]	
        at = g['a'][i].strip('+-') 
        tf.write(j + '\t' + at+j + '\t' + str(x[0]) +  '\t' + str(x[1])+ '\t' + str(x[2]) + '\t' + at + '\n') 
    tf.write('@<TRIPOS>BOND\n')
    for i in g['b'] : 
        b = g['b'][i]
        tf.write( str(i) + '\t' +str(b[0]) + '\t' + str(b[1]) + '\t' + str(b[2]) + '\n' )     
    tf.close() 
    return c + 1



c = 1   
###### the phosphate groups

# all bonds : 
for i in d : 
    for j in d : 
        if j >= i and link(d[i],d[j]): 
            c = export([d[i],d[j]],c)


# all angles : 
for i in d :
    for j in dl :        
        if link(d[i],dl[j]) :            
            for k in d :                
                if k >= i:                    
                    if link(dl[j],d[k]) :                      
                        c = export([d[i],dl[j],d[k]],c)  
                        


pool = []                       
# all dihedral angles
for i in d : 
    for j in dl : 
        if link(d[i],dl[j]) : 
            for k in dl : 
                if link(dl[j],dl[k]) : 
                    for l in d : 
                        if link(dl[k],d[l]) : 
                            if new([i,j,k,l],pool) : 
                                c = export([d[i],dl[j],dl[k],d[l]],c) 

                            
                            

# dihedral angles with pohsphate
pool = []
ate = [15,16,17,18,19,28]
for i in ate  : 
    for j in dp: 
        if link(d[i],dp[j]) : 
            for k in [114,115,116]  : 
                if link(dp[j],dl[k]) : 
                    for l in dp : 
                        if link(dl[k],dp[l]) : 
                            for m in ate : 
                                if link(dp[l],d[m]) : 
                                    if new([i,j,k,l,m] , pool): 
                                        c = export([d[i],dp[j],dl[k],dp[l],d[m]] , c)
                                        
                
pool = []
for i in ate  : 
    for j in dp: 
        if link(d[i],dp[j]) : 
            for k in [114,115,116]  : 
                if link(dp[j],dl[k]) : 
                    for l in dl : 
                        if link(dl[k],dl[l]) : 
                            for m in d : 
                                if link(dl[l],d[m]) : 
                                    if new([i,j,k,l,m] , pool): 
                                        c = export([d[i],dp[j],dl[k],dl[l],d[m]] , c)            


pool = []
for i in ate  : 
    for j in dp: 
        if link(d[i],dp[j]) : 
            for k in [114,115,116]  : 
                if link(dp[j],dl[k]) : 
                    for l in d : 
                        if link(dl[k],d[l]) : 
                            if new([i,j,k,l] , pool): 
                                c = export([d[i],dp[j],dl[k],d[l]] , c) 




###############################################################################
###############################################################################
###############################################################################
### execute the cgenff for many files 

from os import walk ,getcwd , system

count = 1
### getting the mol2 file
mol2 = 0
path = getcwd()
for root , dirs, files in walk(path):
    for f in files :
        if '.mol2' in f :
            print count , '===================  ' , f , '  ===================\n'
            srt = f.replace('mol2','srt')
            system('./cgenff -a ' + f + ' > ' + srt)
            print '\n\n\n'
            count += 1



print '***************************************'
print 'ENDED SUCCESSFULLY'
